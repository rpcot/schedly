const { InlineKeyboard, Keyboard } = require("grammy");
const { Users } = require("../models");
const { developerId } = require("../config");
const { errorAnswer } = require("./utils");

async function getUserData(userId) {
    const bot = require('../index');

    const [data] = await Users.findOrCreate({
        where: { userId },

        defaults: { userId },
    });

    bot.logger.info('–ó–∞–ø—Ä–æ—Å —é–∑–µ—Ä–¥–∞—Ç—ã', { data, userId });

    return data;

}

async function setWait(userId, waitData) {

    const bot = require('../index');

    const data = await getUserData(userId);

    data.wait = waitData;

    await Users.update({ wait: data.wait }, { where: { id: data.id } });

    bot.logger.info('–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –æ–∂–∏–¥–∞–Ω–∏—è –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è', { data });

    return data.wait;

}

async function checkAdminPerms(userId) {
    const userdata = await getUserData(userId);

    return userdata.group === 'admin' || userdata.group === 'developer';
}

async function setPrefix(userId, prefix = '') {
    const bot = require('..');

    const userdata = await getUserData(userId);

    userdata.prefix = prefix;
    await userdata.save();

    bot.logger.info(`–£—Å—Ç–∞–Ω–æ–≤–∫–∞ –ø—Ä–µ—Ñ–∏–∫—Å–∞`, { userId, prefix });

    return userdata;
}

async function setGroup(userId, group) {
    const bot = require('..');

    const userdata = await getUserData(userId);

    userdata.group = group;
    await userdata.save();

    bot.logger.info(`–£—Å—Ç–∞–Ω–æ–≤–∫–∞ –≥—Ä—É–ø–ø—ã`, { userId, group });

    return userdata;
}

async function sendGoAdminRules(ctx) {

    const isAdmin = await checkAdminPerms(ctx.from.id);
    if (isAdmin)
        return void await errorAnswer(ctx, '–¢–µ–±–µ <b>—É–∂–µ –≤—ã–¥–∞–Ω—ã</b> –∞–¥–º–∏–Ω –ø—Ä–∞–≤–∞');

    const inline = new InlineKeyboard()
        .text('–•–æ—á—É –ø–æ–º–æ—á—å', 'go_admin?:go')
        .row()
        .text('–û—Ç–º–µ–Ω–∏—Ç—å', 'cancel');

    const text = `–°—Ç–∞–≤ <b>–∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º</b>, —Ç—ã <b>–ø–æ–ª—É—á–∏—à—å</b> –¥–æ—Å—Ç—É–ø –∫ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—é —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è –∏ —Å–º–æ–∂–µ—à—å <b>–ø–æ–º–æ–≥–∞—Ç—å</b> –Ω–∞–º –≤ –∞–∫—Ç—É–∞–ª–∏–∑–∞—Ü–∏–∏ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è.
    `.replace(/  +/g, '');

    await ctx.reply(text, {
        reply_markup: inline,
        parse_mode: 'HTML',
    });

}

async function sendGoAdminRequest(ctx) {
    const bot = require('..');

    const inline = new InlineKeyboard()
        .text('–ü—Ä–∏–Ω—è—Ç—å', `go_admin?:accept?:${ctx.from.id}`)
        .text('–û—Ç–∫–ª–æ–Ω–∏—Ç—å', `cancel`);

    const text = `–ó–∞–ø—Ä–æ—Å –Ω–∞ –ø–æ–ª—É—á–µ–Ω–∏–µ <b>–∞–¥–º–∏–Ω –ø—Ä–∞–≤</b> –æ—Ç <b>${ctx.from.username || `${ctx.from.first_name} ${ctx.from.last_name}`}</b> | <code>${ctx.from.id}</code>.
    `.replace(/  +/g, '');

    try {
        await ctx.api.sendMessage(developerId, text, {
            reply_markup: inline,
            parse_mode: 'HTML',
        });

        await ctx.editMessageText(`–¢–≤–æ–π –∑–∞–ø—Ä–æ—Å <b>—É—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω</b>, –æ—Å—Ç–∞–ª–æ—Å—å –Ω–µ–º–Ω–æ–≥–æ –ø–æ–¥–æ–∂–¥–∞—Ç—å.`, {
            parse_mode: 'HTML',
        });
    } catch (error) {
        bot.logger.error(`–í–æ–∑–Ω–∏–∫–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –∑–∞–ø—Ä–æ—Å–∞ –Ω–∞ –ø–æ–ª—É—á–µ–Ω–∏–µ –∞–¥–º–∏–Ω –ø—Ä–∞–≤:\n${error.stack}`, { ctx });
        await ctx.editMessageText(`<b>–í–æ–∑–Ω–∏–∫–ª–∞ –Ω–µ–ø—Ä–µ–¥–≤–∏–¥–µ–Ω–Ω–∞—è –æ—à–∏–±–∫–∞</b>\n–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π –µ—â—ë —Ä–∞–∑`);
    }

}

async function answerGoAdminRequest(ctx, action, targetUserId) {
    const bot = require('..');

    if (action === 'accept') {
        try {
            await setGroup(targetUserId, 'admin');

            const text = ctx.msg.text + `\n<b>–ü—Ä–∏–Ω—è—Ç–æ</b>`;
            await ctx.editMessageText(text, {
                parse_mode: 'HTML',
            });

            const keyboard = await getGeneralMenuKeyboard(targetUserId);

            await ctx.api.sendMessage(targetUserId, `<b>–ü—Ä–∏–≤–µ—Ç!</b> –¢–≤–æ–π –∑–∞–ø—Ä–æ—Å –Ω–∞ –ø–æ–ª—É—á–µ–Ω–∏–µ <b>–∞–¥–º–∏–Ω –ø—Ä–∞–≤</b> –æ–¥–æ–±—Ä–µ–Ω, —Ç–µ–ø–µ—Ä—å —Ç—ã <b>–º–æ–∂–µ—à—å –ø–æ—Å–º–æ—Ç—Ä–µ—Ç—å</b> –¥–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã —Å –ø–æ–º–æ—â—å—é <b>/help</b>.\nüíñ –°–ø–∞—Å–∏–±–æ –∑–∞ –ø–æ–º–æ—â—å!`, {
                message_effect_id: '5104841245755180586',
                parse_mode: 'HTML',
                reply_markup: keyboard,
            })
                .catch(() => { });
        } catch (error) {
            bot.logger.error(`–í–æ–∑–Ω–∏–∫–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —É—Å—Ç–∞–Ω–æ–≤–∫–µ –≥—Ä—É–ø–ø—ã –∞–¥–º–∏–Ω:\n${error.stack}`, { ctx });
            await ctx.editMessageText(`<b>–í–æ–∑–Ω–∏–∫–ª–∞ –Ω–µ–ø—Ä–µ–¥–≤–∏–¥–µ–Ω–Ω–∞—è –æ—à–∏–±–∫–∞</b>`);
        }
    } else {
        const text = ctx.msg.text + `\n<b>–û—Ç–∫–ª–æ–Ω–µ–Ω–æ</b>`;
        await ctx.editMessageText(text, {
            parse_mode: 'HTML',
        });
    }
}

async function showUserManagePanel(ctx, targetUserId, { reply = true } = {}) {
    const userdata = await getUserData(targetUserId);

    if (!userdata)
        return void await errorAnswer(ctx, `–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω`, {
            deleteAfter: 5
        });

    if (userdata.group === 'developer')
        return void await errorAnswer(ctx, '–ü–µ—Ä–µ–ø—Ä–æ–≤–µ—Ä—å –∞–π–¥–∏—à–Ω–∏–∫', {
            deleteAfter: 5
        });

    const inline = new InlineKeyboard();

    if (userdata.group === 'admin') {
        inline.text('–°–Ω—è—Ç—å –∞–¥–º–∏–Ω–∫—É', `user_manage?:${targetUserId}?:admin?:take`);
    } else {
        inline.text('–í—ã–¥–∞—Ç—å –∞–¥–º–∏–Ω–∫—É', `user_manage?:${targetUserId}?:admin?:set`);
    }

    const text = `<b>–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º <code>${targetUserId}</code></b>`;

    const action = (reply)
        ? 'reply'
        : 'editMessageText';

    await ctx[action](text, {
        parse_mode: 'HTML',
        reply_markup: inline,
    });

}

async function getGeneralMenuKeyboard(userId) {
    const keyboard = new Keyboard()
        .text('üìÖ –†–∞—Å–ø–∏—Å–∞–Ω–∏–µ –Ω–∞ —Å–µ–≥–æ–¥–Ω—è')
        .text('üìÖ –†–∞—Å–ø–∏—Å–∞–Ω–∏–µ –Ω–∞ –∑–∞–≤—Ç—Ä–∞')
        .row()
        .text('üåê –°–∞–π—Ç –±–æ—Ç–∞')
        .row()
        .text('üöÄ –°—Ç–∞—Ç—å –∞–¥–º–∏–Ω–æ–º')
        .text('üíñ –û–±—Ä–∞—Ç–Ω–∞—è —Å–≤—è–∑—å')
        .row()
        .resized();

    const isAdmin = await checkAdminPerms(userId);
    if (isAdmin) {
        keyboard.text('üîß –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ–º');
    }

    return keyboard;
}

module.exports = {
    getUserData,
    setWait,
    checkAdminPerms,
    setPrefix,
    setGroup,
    sendGoAdminRules,
    sendGoAdminRequest,
    answerGoAdminRequest,
    showUserManagePanel,
    getGeneralMenuKeyboard,
};
