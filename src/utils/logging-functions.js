const { loggingChannelId, generalChannelId, dayNames } = require('../config');

async function sendActionLog(ctx, text, params = []) {
    const bot = require('../index');

    try {
        const author = ctx.from.username || `${ctx.from.first_name} ${ctx.from.last_name}`;

        const messageText = `<b>${author} <code>${ctx.from.id}</code> ${new Date().toLocaleString('ru-RU')}</b>
        ${text}
        ${params.join('\n')}
        `.replace(/  +/g, '');

        await ctx.api.sendMessage(loggingChannelId, messageText, {
            parse_mode: 'HTML',
        });
    } catch (error) {
        bot.logger.error(`–í–æ–∑–Ω–∏–∫–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–∏:\n${error.stack}\n`, { ctx, text, params });
    }

}

async function sendChangeCabinetTodayLog(ctx, lessonData, oldCabinet) {
    const bot = require('../index');

    try {
        const text = `‚ÄºÔ∏è –£—Ä–æ–∫ <b>${lessonData.name}</b> –ø–µ—Ä–µ–Ω–µ—Å–µ–Ω –≤ –∫–∞–±–∏–Ω–µ—Ç <b>${lessonData.cabinet}</b> (—Ä–∞–Ω–µ–µ: ${oldCabinet})`

        await ctx.api.sendMessage(generalChannelId, text, {
            parse_mode: 'HTML',
        });
    } catch (error) {
        bot.logger.error(`–í–æ–∑–Ω–∏–∫–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –æ–ø–æ–≤–µ—â–µ–Ω–∏—è –æ –∏–∑–º–µ–Ω–µ–Ω–∏–∏ –∫–∞–±–∏–Ω–µ—Ç–∞:\n${error.stack}`, { ctx, lesson, oldCabinet })
    }
}

async function sendChangeDayNoteLog(ctx, day) {
    const bot = require('../index');

    try {
        const text = `üîñ –î–æ–±–∞–≤–ª–µ–Ω–æ –ø—Ä–∏–º–µ—á–∞–Ω–∏–µ –Ω–∞ <b>${dayNames[day.index]}</b> (<b>${day.date}</b>):
        <b>${day.note}</b>`.replace(/  +/g, '');

        await ctx.api.sendMessage(generalChannelId, text, {
            parse_mode: 'HTML',
        });
    } catch (error) {
        bot.logger.error(`–í–æ–∑–Ω–∏–∫–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –æ–ø–æ–≤–µ—â–µ–Ω–∏—è –æ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ –ø—Ä–∏–º–µ—á–∞–Ω–∏—è –Ω–∞ –¥–µ–Ω—å:\n${error.stack}`, { ctx, day })
    }
}

module.exports = {
    sendActionLog,
    sendChangeCabinetTodayLog,
    sendChangeDayNoteLog,
};
