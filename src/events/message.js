const { developerId } = require("../config");
const { Days } = require("../models");
const { sendActionLog } = require("../utils/logging-functions");
const { getDayScheduleById, showManageDay, getSubgroups } = require("../utils/schedule-functions");
const { getUserData, setWait } = require("../utils/users-functions");
const { errorAnswer } = require("../utils/utils");

module.exports = {
    name: 'msg',
    async execute(bot, ctx) {

        if (ctx.chat.type !== 'private') return;

        const { wait } = await getUserData(ctx.from.id);

        if (wait?.id) {
            if (wait.id === 'add_note') {

                try {
                    await ctx.api.deleteMessage(ctx.chat.id, ctx.msg.message_id);
                } catch (_) { }

                if (!ctx.msg.text)
                    return void await errorAnswer(ctx, `–°–æ–æ–±—â–µ–Ω–∏–µ –¥–æ–ª–∂–Ω–æ —Å–æ–¥–µ—Ä–∂–∞—Ç—å —Ç–µ–∫—Å—Ç`, { deleteAfter: 5 });

                const data = await getDayScheduleById(wait.dataId);

                if (!data)
                    return void await setWait(ctx.from.id, {});

                data.note = ctx.msg.text.slice(-100);
                await data.save();

                await showManageDay(ctx, data.weekId, data.index, { editMessageId: wait.editMessageId });

                await setWait(ctx.from.id, {});

                await sendActionLog(ctx, '–î–æ–±–∞–≤–ª–µ–Ω–æ –ø—Ä–∏–º–µ—á–∞–Ω–∏–µ', [
                    `–¢–µ–∫—Å—Ç: ${data.note}`,
                    `–ê–π–¥–∏ –¥–Ω—è: ${data.id}`,
                    `–ê–π–¥–∏ –Ω–µ–¥–µ–ª–∏: ${data.weekId}`,
                ]);

            } else if (wait.id === 'add_exam') {

                try {
                    await ctx.api.deleteMessage(ctx.chat.id, ctx.msg.message_id);
                } catch (_) { }

                if (!ctx.msg.text)
                    return void await errorAnswer(ctx, `–°–æ–æ–±—â–µ–Ω–∏–µ –¥–æ–ª–∂–Ω–æ —Å–æ–¥–µ—Ä–∂–∞—Ç—å —Ç–µ–∫—Å—Ç`, { deleteAfter: 5 });

                const data = await getDayScheduleById(wait.dataId);

                if (!data)
                    return void await setWait(ctx.from.id, {});

                data.lessons[wait.lessonIndex].exam = ctx.msg.text.slice(0, 100);
                await Days.update({ lessons: data.lessons }, { where: { id: data.id } });

                await showManageDay(ctx, data.weekId, data.index, { editMessageId: wait.editMessageId });

                await setWait(ctx.from.id, {});

                const lessonData = data.lessons[wait.lessonIndex];

                await sendActionLog(ctx, '–î–æ–±–∞–≤–ª–µ–Ω–∞ –ø—Ä–æ–≤–µ—Ä–æ—á–Ω–∞—è —Ä–∞–±–æ—Ç–∞', [
                    `–¢–µ–∫—Å—Ç: ${ctx.msg.text.slice(0, 100)}`,
                    `–£—Ä–æ–∫: ${lessonData.name}`,
                    `–ò–Ω–¥–µ–∫—Å —É—Ä–æ–∫–∞: ${wait.lessonIndex}`,
                    `–ê–π–¥–∏ –¥–Ω—è: ${data.id}`,
                    `–ê–π–¥–∏ –Ω–µ–¥–µ–ª–∏: ${data.weekId}`,
                ]);

            } else if (wait.id === 'add_homework') {

                try {
                    await ctx.api.deleteMessage(ctx.chat.id, ctx.msg.message_id);
                } catch (_) { }

                if (!ctx.msg.text)
                    return void await errorAnswer(ctx, `–°–æ–æ–±—â–µ–Ω–∏–µ –¥–æ–ª–∂–Ω–æ —Å–æ–¥–µ—Ä–∂–∞—Ç—å —Ç–µ–∫—Å—Ç`, { deleteAfter: 5 });

                const data = await getDayScheduleById(wait.dataId);

                if (data.lessons[wait.lessonIndex].homework.length >= 3)
                    return void await errorAnswer(ctx, `–î–ª—è –¥–∞–Ω–Ω–æ–≥–æ —É—Ä–æ–∫–∞ –¥–æ—Å—Ç–∏–≥–Ω—É—Ç–æ –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –¥–æ–º–∞—à–Ω–∏—Ö –∑–∞–¥–∞–Ω–∏–π`, { deleteAfter: 5 });

                let homeworkText = ctx.msg.text.slice(0, 300);
                if (wait.teacherId) {
                    const { teachers } = await getSubgroups();
                    homeworkText = `–≥—Ä—É–ø–ø–∞ ${teachers[wait.teacherId]}: ${homeworkText}`;
                }

                const targetLessonData = data.lessons[wait.lessonIndex];

                for (const lesson of data.lessons) {
                    if (lesson.name === targetLessonData.name && lesson.homework.length < 3) {
                        lesson.homework.push(homeworkText);
                    }
                }
                await Days.update({ lessons: data.lessons }, { where: { id: data.id } });

                await showManageDay(ctx, data.weekId, data.index, { editMessageId: wait.editMessageId });

                await setWait(ctx.from.id, {});

                const lessonData = data.lessons[wait.lessonIndex];

                await sendActionLog(ctx, '–î–æ–±–∞–≤–ª–µ–Ω–æ –¥–æ–º–∞—à–Ω–µ–µ –∑–∞–¥–∞–Ω–∏–µ', [
                    `–¢–µ–∫—Å—Ç: ${ctx.msg.text.slice(0, 110)}`,
                    `–£—Ä–æ–∫: ${lessonData.name}`,
                    `–ò–Ω–¥–µ–∫—Å —É—Ä–æ–∫–∞: ${wait.lessonIndex}`,
                    `–ê–π–¥–∏ –¥–Ω—è: ${data.id}`,
                    `–ê–π–¥–∏ –Ω–µ–¥–µ–ª–∏: ${data.weekId}`,
                ]);

            } else if (wait.id === 'feedback') {
                try {
                    await ctx.api.editMessageReplyMarkup(ctx.chat.id, wait.deleteMessageId, [])
                        .catch((error) => { console.log(error) });
                        
                    await ctx.api.sendMessage(developerId, `<b>–ù–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –æ–±—Ä–∞—Ç–Ω–æ–π —Å–≤—è–∑—å—é:</b>\n${ctx.from.username || `${ctx.from.first_name} ${ctx.from.last_name}`} | <code>${ctx.from.id}</code>`, {
                        parse_mode: 'HTML',
                    });

                    await ctx.api.forwardMessage(developerId, ctx.chat.id, ctx.msg.message_id);

                    await ctx.reply(`üíñ <b>–°–ø–∞—Å–∏–±–æ –∑–∞ –æ–±—Ä–∞—Ç–Ω—É—é —Å–≤—è–∑—å</b>, —Ç–≤–æ—ë —Å–æ–æ–±—â–µ–Ω–∏–µ <b>–æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ</b> —Ä–∞–∑—Ä–∞–±–æ—Ç—á–∏–∫—É.\n–í —Å–ª—É—á–∞–µ —á–µ–≥–æ, —Ä–∞–∑—Ä–∞–±–æ—Ç—á–∏–∫ —Å–≤—è–∂–µ—Ç—Å—è —Å —Ç–æ–±–æ–π <b>–≤ –õ–°</b>.`, {
                        parse_mode: 'HTML',
                        message_effect_id: '5159385139981059251',
                        reply_parameters: {
                            message_id: ctx.msg.message_id,
                        },
                    });

                    await setWait(ctx.from.id, {});
                } catch (error) {
                    bot.logger.error(`–í–æ–∑–Ω–∏–∫–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–ø—Ç—Ä–∞–≤–∫–µ —Ñ–∏–¥–±–µ–∫–∞:\n${error.stack}`, { ctx });
                    await errorAnswer(ctx, `<b>–í–æ–∑–Ω–∏–∫–ª–∞ –Ω–µ–ø—Ä–µ–¥–≤–∏–¥–µ–Ω–Ω–∞—è –æ—à–∏–±–∫–∞</b>\n–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π –µ—â—ë —Ä–∞–∑`, {
                        deleteAfter: 5,
                    });
                }
            }
        }

    }
};
